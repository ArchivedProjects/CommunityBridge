#                  Community Bridge Configuration File
# -----------------------------------------------------------------------------

#                             General Settings
# -----------------------------------------------------------------------------
general:
  # Log level controls the degree of detail that is sent to the console/log
  # The possible settings are (in order of quietest to noisiest:
  #   info, config, fine, finer, finest, all
  # - During configuration, I recommend using 'config'.
  # - During normal operation, I recommend using 'info'.
  # - If you want to see the notifications that the synchronize and reminder
  #   notices have been sent, use 'fine'
  # - During troubleshooting of problems, set this to either finest or all.
  log-level: config

  # Allow plugin metrics to start up for this plugin.
  # Disable for all plugins by editing plugins/PluginMetrics/config.yml.
  # They can be viewed at: http://mcstats.org
  plugin-metrics: true

  # Set the unit of measurement for sync and reminder scheduling. Options are:
  # ticks, seconds, minutes, or hours. Note that this applies to both
  # auto-sync-every and auto-remind-every.
  auto-every-unit: minutes

  # This is a timer that will check and sync all data with your database at a
  # set interval. Otherwise group and player statistics will only be
  # synchronized when they join and leave the server.
  auto-sync: true

  # The interval for the auto-sync timer, this should not be set any lower than
  # 20 minutes.
  auto-sync-every: 20

  # The permissions system you're using. A permissions system is required for
  # the following features:
  # * Group Synchronization (both primary and secondary)
  # Current Options are: PEX, bPerms, GroupManager, PermsBukkit
  permissions-system:

  # If ~APPURL~ appears in a message in messages.yml, it will be replaced with
  # this:
  application-url:

#                             Database Settings
# -----------------------------------------------------------------------------
# Please ensure if you run your Minecraft server on a remote host
# that your MySQL server allows REMOTE connections. This WILL NOT WORK unless
# your MySQL server is configured to allow connections from the machine that
# your Minecraft server is running on. If you don't know what that means,
# consult your hosting provider on how to configure your MySQL server correctly.
# All of this information should be the same server and database used by your
# web-application...
database:
  # Hostname for your MySQL Server
  hostname: localhost

  # MySQL Port
  port: 3306

  # Database Name
  name: databasename

  # Database Username
  username: username

  # Database Password
  password: password

#                             Player Linking Settings
# -----------------------------------------------------------------------------
# Settings associated with linking a Minecraft player with a web application's
# user. As this feature is a prerequisite for all other features, it cannot
# be disabled.
player-user-linking:
  # If you want the player disconnected from the game if they haven't
  # registered, then set this to true. They will be shown the
  # link-unregistered-player message (in message.yml) on the disconnected
  # screen.
  kick-unregistered: false

  # This is a timer that will notify unregistered users to register every few
  # minutes.
  auto-remind: true

  # The interval for the auto-remind timer, this should be no less than
  # 5-10 minutes. Note that this uses the units specified above in
  # auto-every-unit.
  auto-remind-every: 10

  # Set these to true to inform players when they log in if they're linked to
  # the web application. These correspond to the link-unregistered-player and
  # link-registered-player messages in messages.yml.
  notify-registered-player: true
  notify-unregistered-player: true

  # This is where we specify how to associate a Minecraft player with a web
  # application user. We do this by matching up the player name with a name
  # stored in the web application's database.
  #
  # If you want your players to use the same name on both the server and the
  # web application, then you will need to provide the table and column
  # information where the web application relates its user IDs with the user's
  # name/login ID/login/username.
  #
  # If you want to allow them to use a different name on the web application,
  # you need to add a custom field or column to your web application's database,
  # and provide that table and column information here.

  # The name of the table which contains the columns:
  table-name:

  # Column on the table that contains the user ID. Typically something like
  # user_id or member_id
  user-id-column:

  # If the player name is stored in a key-value pair of columns instead of
  # its own column, set this to true:
  uses-key: false

  # If you set 'linking-uses-key' to false, then set this to the column that
  # the playername is stored in. Otherwise, leave it empty.
  playername-column:

  # If you set 'linking-uses-key' to true, then set the key column, value column,
  # and the key-name here. Otherwise, leave these fields empty.
  key-name:
  key-column:
  value-column:

#                             Requirements
# -----------------------------------------------------------------------------
# Control access to the game on the basis of various settings.
requirement:
  avatar:
    # With this enabled, players that do not have an avatar will be kicked.
    enabled: false
    # Table that contains the avatar column
    table-name:
    # Column on the avatar table that contains the user ID.
    user-id-column:
    # Column on the avatar table that contains the avatar information. If this
    # column contains data, the user is assumed by CommunityBridge to have an
    # avatar.
    avatar-column:
  minimum-posts:
    # With this enabled, players that do not have the minimum number of posts
    # will be kicked.
    enabled: false
    # Table that contains a user's post count.
    table-name:
    # Column containing the user's ID on the post count table.
    user-id-column:
    # Column containing the user's post count.
    post-count-column:
    # Minimum number of posts to require.
    post-count:

#                             Statistics Tracking
# -----------------------------------------------------------------------------
# In general, to make this work, your web application will need to support
# custom profile fields or a similar feature. CommunityBridge will put the
# information in the database. It is up to you to configure your web application
# so that it displays the information.
statistics:
  # Enables statistics tracking. Nothing will be tracked unless you also enable
  # at least one of the trackers below.
  enabled: false
  # Name of the table to insert the tracking information on to.
  table-name:
  # Name of the column that contains the player's User ID on the table.
  user-id-column:
  # Set this to true if data on the table is stored in key-value pairs.
  uses-key: false

  # If uses-key is true, set these as well. They are unused if uses-key is false.
  key-column:
  value-column:

  # Individual trackers
  # -------------------
  trackers:
    # Below each tracker can be enabled and configured. For each tracker:
    # * If uses key is true, set column-or-key-name to the key name OR
    #   If uses key is false, set column-or-key-name to the column name
    # For some trackers, there is a formatted version as well. For those
    # trackers, the formatted version is optional. If you wish to use the
    # formatted version, set the formatted-column-or-key-name appropriately.

    # Online Status: Show a player is playing on the server in the forums.
    online-status:
      enabled: false
      column-or-key-name:
      # Set this to what should be stored in the field when the user is online.
      online-value:
      # Set this to what should be stored in the field when the user is offline.
      offline-value:

    # Last Online: Record the time that player was last online
    last-online:
      enabled: false
      column-or-key-name:
      formatted-column-or-key-name:

    # Game Time: Record how much time the player has played.
    # Requires the last-online tracker to be turned on as well.
    game-time:
      enabled: false
      column-or-key-name:
      formatted-column-or-key-name:

    # Player's current level
    level:
      enabled: false
      column-or-key-name:

    # Player's current progress toward next level
    current-xp:
      enabled: false
      column-or-key-name:
      formatted-column-or-key-name:

    # Player's current XP total
    total-xp:
      enabled: false
      column-or-key-name:

    # Player's current health
    health:
      enabled: false
      column-or-key-name:

    # Lifeticks; the amount of time the player has been alive.
    lifeticks:
      enabled: false
      column-or-key-name:
      formatted-column-or-key-name:

    # Wallet. The amount of money the player currently has. REQUIRES VAULT.
    wallet:
      enabled: false
      column-or-key-name:

#                     Web Application Group Configuration
# -----------------------------------------------------------------------------
#
# Some terminology:
# - Primary group: A group setting such that the setting can only be set to
#   exactly one group. Most web applications have such a feature. Very few
#   permissions systems have such a feature.
# - Secondary group(s): A group setting such that the setting can be set to
#   multiple groups or none.

# This section describes to Communitybridge how the web application stores
# user group/role information.
app-group-config:
  # If the web application has a primary group/role feature, configure it here.
  primary:
    enabled: false
    # The table that contains the primary group ID.
    table-name:

    # The column on the table that contains the user ID.
    user-id-column:

    # If the primary group is stored in a key-value pair, set this to true.
    uses-key: false

    # The column that the primary group ID is stored in. If uses-key is true,
    # this is the column that the "value" of the key-value pair is stored in.
    group-id-column:

    # If you set uses-key to true, then set the following three settings:
    # Key name for the key-value pair.
    key-name:
    # Column that the key name is in
    key-column:

  # If the web application has a secondary groups feature, configure it here.
  secondary:
    enabled: false
    # The table that contains the secondary groups.
    table-name:

    # The column on the table that contains the user ID.
    user-id-column:

    # Storage method. Set to one of the following:
    # - junction: The table can contain multiple rows for a given user_id,
    #             each with their own group_id.
    # - single-column: All the group ids in a single column with a specified
    #                 delimiter below.
    # - key-value: The secondary groups are in a single column on a table that
    #              stores its data in key-value pairs.
    storage-method: junction

    # The column that the group ID(s) are stored in:
    # (For the key-value method, this is the 'value' column)
    group-id-column:

    # For single-column or key-value storage methods, the delimiter/separator
    # that separates the group IDs: (ignored for junction storage method)
    group-id-delimiter: ','

    # For the key-value storage method:
    # (ignored for the junction and single-column methods)
    # Key name for the key-value pair.
    key-name:
    # Column that the key name is in
    key-column:

# Simple Synchronization Configuration
simple-synchronization:
  # Set this to true for simple two-way synchronization
  enabled: false
  
  # Set this to true if you want the player to be notified when their primary group changes.
  primary-group-change-notify: false

  # List groups and group IDs to be synchronized here. On the left side of
  # the colon put a web application's group ID. On the right side of the colon
  # put the corresponding permissions group name. Only list group IDs and
  # group names you wish to be synchronized.
  group-mapping:
    '1' : 'guest'
    '2' : 'member'
